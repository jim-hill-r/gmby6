input CreatePostInput {
	id: ID!
	text: String!
	created: AWSDateTime!
	createdBy: String!
}

input CreateRouteInput {
	id: ID!
	title: String!
	created: AWSDateTime!
	createdBy: String!
}

input CreateUserInput {
	id: ID!
	name: String!
	created: AWSDateTime!
}

input DeletePostInput {
	id: ID!
	created: AWSDateTime!
}

input DeleteRouteInput {
	id: ID!
	created: AWSDateTime!
}

input DeleteUserInput {
	id: ID!
}

type Mutation {
	createPost(input: CreatePostInput!): Post
	updatePost(input: UpdatePostInput!): Post
	deletePost(input: DeletePostInput!): Post
	createUser(input: CreateUserInput!): User
	updateUser(input: UpdateUserInput!): User
	deleteUser(input: DeleteUserInput!): User
	createRoute(input: CreateRouteInput!): Route
	updateRoute(input: UpdateRouteInput!): Route
	deleteRoute(input: DeleteRouteInput!): Route
}

type Post {
	id: ID!
	text: String!
	created: AWSDateTime!
	createdBy: String!
}

type PostConnection {
	items: [Post]
	nextToken: String
}

type Query {
	getPost(id: ID!, created: AWSDateTime!): Post
	listPosts(filter: TablePostFilterInput, limit: Int, nextToken: String): PostConnection
	getUser(id: ID!): User
	listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
	getRoute(id: ID!, created: AWSDateTime!): Route
	listRoutes(filter: TableRouteFilterInput, limit: Int, nextToken: String): RouteConnection
}

type Route {
	id: ID!
	title: String!
	created: AWSDateTime!
	createdBy: String!
}

type RouteConnection {
	items: [Route]
	nextToken: String
}

type Subscription {
	onCreatePost(id: ID, text: String, created: AWSDateTime): Post
		@aws_subscribe(mutations: ["createPost"])
	onUpdatePost(id: ID, text: String, created: AWSDateTime): Post
		@aws_subscribe(mutations: ["updatePost"])
	onDeletePost(id: ID, text: String, created: AWSDateTime): Post
		@aws_subscribe(mutations: ["deletePost"])
	onCreateUser(id: ID, created: AWSDateTime): User
		@aws_subscribe(mutations: ["createUser"])
	onUpdateUser(id: ID, created: AWSDateTime): User
		@aws_subscribe(mutations: ["updateUser"])
	onDeleteUser(id: ID, created: AWSDateTime): User
		@aws_subscribe(mutations: ["deleteUser"])
	onCreateRoute(id: ID, title: String, created: AWSDateTime): Route
		@aws_subscribe(mutations: ["createRoute"])
	onUpdateRoute(id: ID, title: String, created: AWSDateTime): Route
		@aws_subscribe(mutations: ["updateRoute"])
	onDeleteRoute(id: ID, title: String, created: AWSDateTime): Route
		@aws_subscribe(mutations: ["deleteRoute"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TablePostFilterInput {
	id: TableIDFilterInput
	text: TableStringFilterInput
	created: TableStringFilterInput
	createdBy: TableStringFilterInput
}

input TableRouteFilterInput {
	id: TableIDFilterInput
	title: TableStringFilterInput
	created: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input TableUserFilterInput {
	id: TableIDFilterInput
	created: TableStringFilterInput
}

input UpdatePostInput {
	id: ID!
	text: String
	created: AWSDateTime!
}

input UpdateRouteInput {
	id: ID!
	title: String
	created: AWSDateTime!
}

input UpdateUserInput {
	id: ID!
	created: AWSDateTime
}

type User {
	id: ID!
	created: AWSDateTime!
}

type UserConnection {
	items: [User]
	nextToken: String
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}