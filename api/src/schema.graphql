schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Climb {
  created: AWSDateTime!
  id: ID!
}

type ClimbConnection {
  items: [Climb]
  nextToken: String
}

type Mutation {
  createClimb(input: CreateClimbInput!): Climb
  createPost(input: CreatePostInput!): Post
  createRoute(input: CreateRouteInput!): Route
  createUser(input: CreateUserInput!): User
  deleteClimb(input: DeleteClimbInput!): Climb
  deletePost(input: DeletePostInput!): Post
  deleteRoute(input: DeleteRouteInput!): Route
  deleteUser(input: DeleteUserInput!): User
  updateClimb(input: UpdateClimbInput!): Climb
  updatePost(input: UpdatePostInput!): Post
  updateRoute(input: UpdateRouteInput!): Route
  updateUser(input: UpdateUserInput!): User
}

type Post {
  created: AWSDateTime!
  createdBy: String!
  id: ID!
  text: String!
}

type PostConnection {
  items: [Post]
  nextToken: String
}

type Query {
  getClimb(created: AWSDateTime!, id: ID!): Climb
  getPost(created: AWSDateTime!, id: ID!): Post
  getRoute(created: AWSDateTime!, id: ID!): Route
  getUser(id: ID!): User
  listClimbs(filter: TableClimbFilterInput, limit: Int, nextToken: String): ClimbConnection
  listPosts(filter: TablePostFilterInput, limit: Int, nextToken: String): PostConnection
  listRoutes(filter: TableRouteFilterInput, limit: Int, nextToken: String): RouteConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
}

type Route {
  created: AWSDateTime!
  createdBy: String!
  id: ID!
  title: String!
}

type RouteConnection {
  items: [Route]
  nextToken: String
}

type Subscription {
  onCreateClimb(created: AWSDateTime, id: ID): Climb @aws_subscribe(mutations : ["createClimb"])
  onCreatePost(created: AWSDateTime, id: ID, text: String): Post @aws_subscribe(mutations : ["createPost"])
  onCreateRoute(created: AWSDateTime, id: ID, title: String): Route @aws_subscribe(mutations : ["createRoute"])
  onCreateUser(created: AWSDateTime, id: ID): User @aws_subscribe(mutations : ["createUser"])
  onDeleteClimb(created: AWSDateTime, id: ID): Climb @aws_subscribe(mutations : ["deleteClimb"])
  onDeletePost(created: AWSDateTime, id: ID, text: String): Post @aws_subscribe(mutations : ["deletePost"])
  onDeleteRoute(created: AWSDateTime, id: ID, title: String): Route @aws_subscribe(mutations : ["deleteRoute"])
  onDeleteUser(created: AWSDateTime, id: ID): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateClimb(created: AWSDateTime, id: ID): Climb @aws_subscribe(mutations : ["updateClimb"])
  onUpdatePost(created: AWSDateTime, id: ID, text: String): Post @aws_subscribe(mutations : ["updatePost"])
  onUpdateRoute(created: AWSDateTime, id: ID, title: String): Route @aws_subscribe(mutations : ["updateRoute"])
  onUpdateUser(created: AWSDateTime, id: ID): User @aws_subscribe(mutations : ["updateUser"])
}

type User {
  created: AWSDateTime!
  id: ID!
}

type UserConnection {
  items: [User]
  nextToken: String
}

input CreateClimbInput {
  created: AWSDateTime!
  id: ID!
}

input CreatePostInput {
  created: AWSDateTime!
  createdBy: String!
  id: ID!
  text: String!
}

input CreateRouteInput {
  created: AWSDateTime!
  createdBy: String!
  id: ID!
  title: String!
}

input CreateUserInput {
  created: AWSDateTime!
  id: ID!
  name: String!
}

input DeleteClimbInput {
  created: AWSDateTime!
  id: ID!
}

input DeletePostInput {
  created: AWSDateTime!
  id: ID!
}

input DeleteRouteInput {
  created: AWSDateTime!
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableClimbFilterInput {
  created: TableStringFilterInput
  id: TableIDFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TablePostFilterInput {
  created: TableStringFilterInput
  createdBy: TableStringFilterInput
  id: TableIDFilterInput
  text: TableStringFilterInput
}

input TableRouteFilterInput {
  created: TableStringFilterInput
  id: TableIDFilterInput
  title: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserFilterInput {
  created: TableStringFilterInput
  id: TableIDFilterInput
}

input UpdateClimbInput {
  created: AWSDateTime!
  id: ID!
}

input UpdatePostInput {
  created: AWSDateTime!
  id: ID!
  text: String
}

input UpdateRouteInput {
  created: AWSDateTime!
  id: ID!
  title: String
}

input UpdateUserInput {
  created: AWSDateTime
  id: ID!
}
